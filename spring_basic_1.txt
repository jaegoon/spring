< 1. 스프링 기초 정리 1편 >

0. Java Bean
자바 객체를 컴포넌트화 시켜서 쓰는 개발 방식
자바가 커피라서 커피의 근본이 되는 (커피)콩이라고 이름 붙인 것이라 추정

1. EJB (Enterprise Java Bean)
기업의 비지니스가 복잡해짐에 따라서 JAVA Enterprise 어플리케이션의 복잡성도 증가
이는 곧 비지니스 레벨의 복잡성과 시스템 레벨의 복잡성을 동시에 고려한 개발이 어려워짐을 의미
따라서 이를 좀 더 편하게 개발할 수 있는 방법으로 EJB가 등장
비지니스 레벨과 시스템 레벨을 분리하여 비지니스 레벨에 집중할 수 있게 함.
하지만 이를 위해 불필요하게 무거운 기능, 비싼 장비, 어려운 설정들을 익혀야 했고
가장 큰 문제점은 자바 객체가 가지고 있던 객체지향적인 특징과 장점을 쓰지 못하게 된 것.
그래서 POJO가 등장.
(참조 : https://itewbm.tistory.com/entry/POJOPlain-Old-Java-Object)


2. POJO (Plain Old Java Object)
마틴 파울러는EJB(Enterprise JavaBean)보다는 단순한 자바 오브젝트에 도메인 로직을 넣어 사용하는 것이 여러가지 장점이있는데도
왜 사람들이 그 EJB가 아닌 '평범한자바 오브젝트'를 사용하기를 꺼려 하는지에 대해 의문을 가졌다. 
그리고 그는 단순한 오브젝트에는 EJB와 같은 그럴듯한 이름이 없어어서 그 사용을 주저하는 것이라고 결론 내렸다.
그래서 만든 단어가 POJO라는 용어인 것이다. 
POJO기반의 기술을 사용한다고 말하면 왠지 첨단 기술을 사용하는 앞선 개발자인 듯한 인상을 주기 때문인다.
POJO의 대표적인 예는 Java Bean을 들 수 있다. Java Bean은 기본생성자와 멤버 필드의 getter/setter 메소드를 가진 serializable 객체를 의미.


3. IoC (Inversion of Control)
. 프레임워크의 개념과 일맥상통.(라이브러리와의 차이)
스프링에서는 객체의 생명 주기 관리를 개발자가 아닌 프레임워크의 컨테이너로 하기 때문에
객체에 대한 주도권이 개발자가 아닌 프레임워크에 있다는 것을 의미함.
이를 통해 DI, AOP가 가능하다.
. Q) 빈팩토리와 어플리케이션컨텍스트 차이점은?
 -> 빈팩토리는 빈 객체의 생성과 소멸 등 생명주기에 대한 기능을 가지고 있음
어플리케이션컨텍스트는 빈팩토리의 기능을 모두 포함한 확장 개념으로, 다음과 같은 추가 기능 제공한다.
(http://egloos.zum.com/hongsgo/v/2172092)
1) 가장 큰 차이점 : 싱글톤 빈을 로드하는 방식!
빈팩토리는 getBean 메소드가 처음 호출되는 시점에 빈 객체 생성
어플레케이션컨텍스트는 컨텍스트(컨테이너) 초기화 시점에 모든 싱글톤 빈을 생성한다.

(그외)
2) 국제화가 지원되는 텍스트 메시지를 관리해 준다.
3) 이미지 같은 파일 자원을 로드 할 수 있는 포괄적인 방법을 제공해 준다.
4) 리스너로 등록된 빈에게 이벤트 발생을 알려 준다.


4. DI (Dependency Injection)
. A 객체에서 B객체를 사용할 때, A객체에서 B 객체를 만들어 사용하는 것이 아니라,
다른 곳에서 만들어진 B객체를 주입 받아 사용하는 방식을 뜻함.
즉, 객체간 의존관계를 컨테이너를 통해 연결한다.
가장 흔한 예시 중 하나인 휴대폰과 배터리로 설명할 수 있다.
휴대폰에 들어가는 배터리를 내장 배터리로 할 것인지, 
아니면 외부에서 생산된 외장 배터리를 조립하여 사용할 것인지.
. 보통 2가지 종류가 있다. 1) setter Injection과 2) Construction Injection


5. AOP (Aspect Oriented Programming)
핵심 비즈니스 어플리케이션을 제외한 부가적인 기능이 핵심 기능과 결합도가 높으면
소스 관리 및 개발이 어려워지므로 이를 해결하기 위해 사용되는 프로그래밍.
즉 핵심 기능들이 공통적으로 사용하는 기능들을 묶어서 별도로 관리한다.
부가 공통 기능으로는 로그인, 트랜잭션, 보안, 캐싱 등이 있다.


6. PSA (Portable Service Abstractions)
환경의 변화에 관계없이 일관된 방식으로 기술 접근 환경을 제공하려는 추상화 구조 (좀 어렵다..)
성격이 비슷한 여러 종류의 기술을 추상화하고 이를 일관된 방법으로 사용할 수 있도록 지원.
트랜잭션 서비스 추상화 : 여러 가지의 DB를 사용한다고 하면 Global Transaction 방식을 사용.
자바는 JDBC 외에 이런 글로벌 트랜잭션을 지원하는 트랜잭션 매니져를 지원하기 위한 API인 JTA(Java Transaction Api)를 제공.
높은 응집도와 낮은 결합도를 준수.

출처: https://ooz.co.kr/175
